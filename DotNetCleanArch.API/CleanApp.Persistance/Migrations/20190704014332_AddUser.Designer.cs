// <auto-generated />
using System;
using CleanApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CleanApp.Persistence.Migrations
{
    [DbContext(typeof(CleanAppDbContext))]
    [Migration("20190704014332_AddUser")]
    partial class AddUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CleanApp.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<string>("ProvinceState")
                        .HasMaxLength(200);

                    b.Property<string>("Street")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.BuyOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Shipper")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("BuyOrders");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.BuyOrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuyOrderId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MascotId");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BuyOrderId");

                    b.HasIndex("MascotId");

                    b.ToTable("BuyOrderDetails");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClientID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnName("AddressID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("Messenger")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.Make", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Makes");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.Mascot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MakeId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MakeId");

                    b.ToTable("Mascots");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.RentOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("money");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RentOrders");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.RentOrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("money");

                    b.Property<decimal>("Discount")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("money");

                    b.Property<int>("MascotId");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("RentOrderId");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MascotId");

                    b.HasIndex("RentOrderId");

                    b.ToTable("RentOrderDetails");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.BuyOrderDetails", b =>
                {
                    b.HasOne("CleanApp.Domain.Entities.BuyOrder", "BuyOrder")
                        .WithMany("BuyOrderDetails")
                        .HasForeignKey("BuyOrderId")
                        .HasConstraintName("FK_BuyOrderDetails_BuyOrder");

                    b.HasOne("CleanApp.Domain.Entities.Mascot", "Mascot")
                        .WithMany("BuyOrderDetails")
                        .HasForeignKey("MascotId")
                        .HasConstraintName("FK_BuyOrderDetails_Mascot");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.Client", b =>
                {
                    b.HasOne("CleanApp.Domain.Entities.Address", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Clients_Address");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.Make", b =>
                {
                    b.HasOne("CleanApp.Domain.Entities.Address", "Address")
                        .WithMany("Makes")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Makes_Addresses");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.Mascot", b =>
                {
                    b.HasOne("CleanApp.Domain.Entities.Make", "Make")
                        .WithMany("Mascots")
                        .HasForeignKey("MakeId")
                        .HasConstraintName("FK_Mascots_Make");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.RentOrder", b =>
                {
                    b.HasOne("CleanApp.Domain.Entities.Client", "Client")
                        .WithMany("RentOrders")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_RentOrders_Clients");
                });

            modelBuilder.Entity("CleanApp.Domain.Entities.RentOrderDetails", b =>
                {
                    b.HasOne("CleanApp.Domain.Entities.Mascot", "Mascot")
                        .WithMany("RentOrderDetails")
                        .HasForeignKey("MascotId")
                        .HasConstraintName("FK_RentOrderDetails_Mascot");

                    b.HasOne("CleanApp.Domain.Entities.RentOrder", "RentOrder")
                        .WithMany("RentOrderDetails")
                        .HasForeignKey("RentOrderId")
                        .HasConstraintName("FK_RentOrderDetails_RentOrder");
                });
#pragma warning restore 612, 618
        }
    }
}
